#!/usr/bin/env bash
#       __      _       _
#  ___ / _| ___| |_ ___| |__
# / __| |_ / _ \ __/ __| '_ \
# \__ \  _|  __/ || (__| | | |
# |___/_|  \___|\__\___|_| |_|
# speedie's fetch
# This fetch is licensed under the MIT license.
# For more information, see https://raw.githubusercontent.com/speediegamer/sfetch/main/LICENSE
#
# This fetch is also bundled with spDE.
# Please report any bugs to https://github.com/speediegamer/sfetch/issues
############################################################
# Settings

# Label/Icons
kernelicon="KERNEL:"
osicon="OS:"
shellicon="SHELL:"
pkgicon="PACKAGES:"
cpuicon="CPU:"
initicon="INIT:"
usedramicon="USED:"
ramicon="RAM:"

# Mac OS X/OS X/macOS Label/Icons
macicon="MAC:"

# Colors
default='\033[0m' # default i guess
yellow='\033[1;33m' # yellow (used for hostname and username)
black='\033[0;30m' # black (used for Mac OS X)
purple='\033[0;35m' # purple (used for Gentoo, Funtoo and Trash)
lblue='\033[1;34m' # light blue (used for Project 081)
cyan='\033[0;36m' # cyan (used for Arch)
blue='\033[0;34m' # blue (used for Fedora)
lgreen='\033[1;32m' # light green (used for Manjaro)
green='\033[0;32m' # green (used for Void)
red='\033[0;31m' # red (used for Debian)
orange='\033[0;33m' # orange (used for lunix)

##############################
# Code, probably don't edit.

# Get the OS
if [[ -f "/etc/os-release" ]]; then
    os="$(< /etc/os-release)" # Get the OS on Linux
elif [[ -f "/System/Library/CoreServices/SystemVersion.plist" ]]; then
	mac="$(< /System/Library/CoreServices/SystemVersion.plist)" && macmodel="$(sysctl hw.model | sed 's/hw.model: //')" # Get the OS (macOS)
fi

# Check what init system the user is using.
if [[ -f "/lib/systemd/systemd" ]]; then
	init="systemd"
elif [[ -f "/sbin/openrc" ]]; then
	init="OpenRC"
elif [[ -f "/usr/bin/runit" ]]; then
	init="runit"
elif [[ -f "/usr/bin/s6-rc" ]]; then
	init="s6"
elif [[ -f "/etc/systemd/user.conf" ]]; then
        init="systemd"
fi

# Check what distro is used.
if [[ $os =~ "Gentoo" ]]; then
	os="Gentoo Linux" && art="Gentoo"
elif [[ $os =~ "Funtoo" ]]; then
	os="Funtoo Linux" && art="Funtoo"
elif [[ $os =~ "Arch" ]]; then
	os="Arch Linux" && art="Arch"
elif [[ $os =~ "Debian" ]]; then
	os="Debian Linux" && art="Debian"
elif [[ $os =~ "pearOS" ]]; then 
	os="PearOS Linux" && art="Trash" # Trash can for PearOS
elif [[ $os =~ "Ubuntu" ]]; then
	os="Ubuntu Linux" && art="Trash" # No ASCII art for Ubuntu yet, using Debian art
elif [[ $os =~ "Fedora" ]]; then
	os="Fedora Linux" && art="Fedora"
elif [[ $os =~ "Cutefish" ]]; then
	os="CuteFish OS Linux" && art="Trash" # Trash can for Cutefish OS
elif [[ $os =~ "Manjaro" ]]; then
        os="Manjarno Linux" && art="Manjaro"
elif [[ $os =~ "void" ]]; then
        os="Void Linux" && art="Void"
elif [[ $os =~ "KDE neon" ]]; then
        os="KDE Neon" && art="Debian"
elif [[ $os =~ "nixos" ]]; then
        os="NixOS" && art="Linux"
fi

# Mac OS X distributions
if [[ $mac =~ "081" ]]; then
         os="Project 081" && art="Project 081" && mac=""
elif [[ $mac =~ "Niresh" ]]; then
         os="Niresh" && art="iTrash" && mac=""
elif [[ $mac =~ "Deneb" ]]; then
         os="iDeneb" && art="iTrash" && mac=""
elif [[ $mac =~ "Zone" ]]; then
         os="Niresh" && art="iTrash" && mac=""
elif [[ $mac =~ "atk" ]]; then
         os="iAtkos" && art="iTrash" && mac=""
elif [[ $mac =~ "JaS" ]]; then
         os="JaS" && art="iTrash" && mac=""
elif [[ $mac =~ "osx86" ]]; then
         os="OSx86" && art="iTrash" && mac=""
fi

# Official Mac OS X versions
if [[ $mac =~ "081" ]]; then
         os="Project 081" && art="Project 081" && mac=""
elif [[ $mac =~ "10.10" ]]; then
         os="OS X 10.10 Yosemite" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.11" ]]; then
         os="OS X 10.11 El Capitan" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.12" ]]; then
         os="macOS 10.12 Sierra" && art="macOS" && mac=""
elif [[ $mac =~ "10.13" ]]; then
         os="macOS 10.13 High Siera" && art="macOS" && mac=""
elif [[ $mac =~ "10.14" ]]; then
         os="macOS 10.14 Mojave" && art="macOS" && mac=""
elif [[ $mac =~ "10.15" ]]; then
         os="macOS 10.15 Catalina" && art="macOS" && mac=""
elif [[ $mac =~ "10.0" ]]; then
         os="Mac OS X 10.0 Cheetah" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.1" ]]; then
         os="Mac OS X 10.1 Puma" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.2" ]]; then
         os="Mac OS X 10.2 Jaguar" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.3" ]]; then
         os="Mac OS X 10.3 Panther" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.4" ]]; then
         os="Mac OS X 10.4 Tiger" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.5" ]]; then
         os="Mac OS X 10.5 Leopard" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.6" ]]; then
         os="Mac OS X 10.6 Snow Leopard" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.7" ]]; then
         os="Mac OS X 10.7 Lion" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.8" ]]; then
         os="OS X 10.8 Mountain Lion" && art="Mac OS X" && mac=""
elif [[ $mac =~ "10.9" ]]; then
         os="OS X 10.9 Mavericks" && art="Mac OS X" && mac=""
elif [[ $mac =~ "11." ]]; then
         os="macOS 11 Big Sur" && art="macOS" && mac=""
elif [[ $mac =~ "12." ]]; then
         os="macOS 12 Monterey" && art="macOS" && mac=""
elif [[ $mac =~ "Mac OS X" ]]; then
         os="Mac OS X " && art="Mac OS X" && mac=""
fi

# If the distro is not any of the above
if [[ $os =~ "NAME" ]]; then
	 os="Linux" && art="Linux" # Linux is the "generic" art
fi

# Base
user="$(whoami)" # whoami returns the user who runs the command

if [[ -f "/etc/hostname" ]]; then
    host="$(< /etc/hostname)"
else
    host="$(hostname)"
fi

# Data
kernel="$(uname -sr)" # Get kernel version
shell="$(basename "${SHELL}")"

if [[ -f "/proc/meminfo" ]]; then
totalram="$(< /proc/meminfo grep -i 'memtotal' | grep -o '[[:digit:]]*' | awk '{$1=$1/1024000; print $1"GB";}' | awk 'NR!-2')"
usedram2="$(free -h --giga | awk '/^Mem/ {print $3}')"
usedram="$(echo $usedram2)B"
fi

if [[ "$usedram" = "" ]]; then
usedram="$(< /proc/meminfo grep -i 'Active:' | grep -o '[[:digit:]]*' | awk '{$1=$1/1024; print $1,"MB";}' | awk 'NR!=2')"
fi

if [[ -f "/System/Library/CoreServices/SystemVersion.plist" ]]; then
totalrammac="$(sysctl hw.memsize | grep -o '[[:digit:]]*' | awk '{$1=$1/1024; print $1,"MB";}')"
cpumac="$(sysctl -n machdep.cpu.brand_string)"
fi

if [[ -d "/usr/local/bin/.spDE" ]]; then
spde="(spDE)"
fi

if [[ -f "/usr/bin/lscpu" ]]; then
	cpu="$(lscpu | sed -nr '/Model name/ s/.*:\s*(.*) @ .*/\1/p')"
else
	cpu="$(uname -p)" # Failsafe
fi

if [[ -f "/etc/nix/nix.conf" ]]; then
        cpu="$(lscpu | sed -nr '/Model name/ s/.*:\s*(.*) @ .*/\1/p')" # I hate you NixOS..
fi

if [[ -f "/usr/bin/pacman" ]]; then
        pkg="$(pacman -Q | wc --lines)" # For Arch based distributions
elif [[ -f "/etc/portage/make.conf" ]]; then
        pkg="$(ls -d /var/db/pkg/*/* | wc --lines)" # For Gentoo based distributions
elif [[ -f "/usr/bin/dpkg" ]]; then
        pkg="$(dpkg --get-selections | wc --lines)" # For Debian based distributions
elif [[ -f "/usr/bin/rpm" ]]; then
        pkg="$(rpm -qa | wc --lines)" # For Red Hat/Fedora based distributions
elif [[ -f "/usr/bin/xbps-query" ]]; then
        pkg="$(xbps-query --list-pkgs | wc --lines)" # For Void based distributions
elif [[ -f "/etc/nix/nix.conf" ]]; then
        pkg="$(ls /run/current-system/sw/bin | wc --lines)" # For NixOS based distributions
fi

if [[ "$(whoami)" = "root" ]]; then
        echo -e "${red}NOTE: Running a fetch script as root is stupid"
fi

# Failsafe just in case the values are empty
if [[ "$cpu" = "" ]]; then
    cpu='$(uname -p)'
elif [[ "$shell" = "" ]]; then
    shell='sh'
elif [[ "$pkg" = "" ]]; then
    pkg="$(ls -lah /usr/bin | wc --lines)"
elif [[ "$totalram" = "" ]]; then
    totalram="Unknown"
elif [[ "$usedram" = "" ]]; then
    usedram="Unknown"
elif [[ "$init" = "" ]]; then
    init="Unknown"
elif [[ "$host" = "" ]]; then
    host="$(uname -n)"
elif [[ "$host" = "" ]]; then
    host="$(< /proc/sys/kernel/hostname)"
elif [[ "$host" = "" ]]; then
    host="$(hostnamectl --static)"
fi

# Display everything to the user!

# Gentoo based distributions
if [[ $art = "Gentoo" ]]; then
echo -e "${yellow}                 $user@$host"
echo -e "${purple}    dSSSSSb.     $osicon ${default}       $os $spde"
echo -e "${purple} .dSSSSSSSSSb.   $kernelicon ${default}   $kernel"
echo -e "${purple} SSSS( )SSSSSSb  $shellicon ${default}    $shell"
echo -e "${purple} QSSSSSSSSSSSSSb $pkgicon ${default} $pkg"
echo -e "${purple}   dSSSSSSSSSSP  $cpuicon ${default}      $cpu"
echo -e "${purple}  dSSSSSSSSSP    $ramicon ${default}      $totalram"
echo -e "${purple} SSSSSSSSSSP     $usedramicon ${default}     $usedram "
echo -e "${purple}  QSSSSSSP       $initicon ${default}     $init" && exit 0
fi

if [[ $art =~ "Funtoo" ]]; then
echo -e "${yellow}                       $user@$host"
echo -e "${purple}   __             _    $osicon ${default}       $os $spde"
echo -e "${purple}  / _|_   _ _ __ | |_  $kernelicon ${default}   $kernel"
echo -e "${purple} | |_| | | | '_ \| __| $shellicon ${default}    $shell"
echo -e "${purple} |  _| |_| | | | | |_  $pkgicon ${default} $pkg "
echo -e "${purple} |_|  \__,_|_| |_|\__| $cpuicon ${default}      $cpu"
echo -e "${purple}                       $ramicon ${default}      $totalram"
echo -e "${purple}                       $usedramicon ${default}     $usedram"
echo -e "${purple}                       $initicon ${default}     $init " && exit 0
fi

# Arch based distributions
if [[ $art =~ "Arch" ]]; then
echo -e "${yellow}                 $user@$host"
echo -e "${cyan}        .        $osicon ${default}         $os $spde"
echo -e "${cyan}       /#\       $kernelicon ${default}     $kernel"
echo -e "${cyan}      /###\      $shellicon ${default}      $shell"
echo -e "${cyan}     /p^###\     $pkgicon ${default}   $pkg"
echo -e "${cyan}    /##P^q##\    $cpuicon ${default}        $cpu"
echo -e "${cyan}   /##(   )##\   $ramicon ${default}        $totalram"
echo -e "${cyan}  /###q#    ,^\  $usedramicon ${default}       $usedram"
echo -e "${cyan} /P^         ^q\ $initicon ${default}       $init" && exit 0
fi

if [[ $art =~ "Manjaro" ]]; then
echo -e "${yellow}                   $user@$host"
echo -e "${lgreen} ZZZZZZZZZZZ ZZZZZ $osicon ${default}       $os $spde"
echo -e "${lgreen} ZZZZZZZZZZZ ZZZZZ $kernelicon ${default}   $kernel"
echo -e "${lgreen} ZZZZZ zzzzz ZZZZZ $shellicon ${default}    $shell"
echo -e "${lgreen} ZZZZZ ZZZZZ ZZZZZ $pkgicon ${default} $pkg "
echo -e "${lgreen} ZZZZZ ZZZZZ ZZZZZ $cpuicon ${default}      $cpu"
echo -e "${lgreen} ZZZZZ ZZZZZ ZZZZZ $ramicon ${default}      $totalram"
echo -e "${lgreen} ZZZZZ ZZZZZ ZZZZZ $usedramicon ${default}     $usedram"
echo -e "${lgreen} ZZZZZ ZZZZZ ZZZZZ $initicon ${default}     $init " && exit 0
fi

# Misc
if [[ $art = "Trash" ]]; then
echo -e "${yellow}             $user@$host"
echo -e "${purple}  ____n____  $osicon ${default}       $os $spde"
echo -e "${purple} /         \ $kernelicon ${default}   $kernel"
echo -e "${purple} -| | | | |- $shellicon ${default}    $shell"
echo -e "${purple}  | | | | |  $pkgicon ${default} $pkg "
echo -e "${purple}  | | | | |  $cpuicon ${default}      $cpu"
echo -e "${purple}  | | | | |  $ramicon ${default}      $totalram"
echo -e "${purple}  | | | | |  $usedramicon ${default}     $usedram"
echo -e "${purple}  \-------/  $initicon ${default}     $init " && exit 0
fi

# Trash for Mac OS X distros
if [[ $art = "iTrash" ]]; then
echo -e "${yellow}             "
echo -e "${purple}  ____n____  ${yellow}$user@$host"
echo -e "${purple} /         \ $osicon ${default}     $os $spde"
echo -e "${purple} -| | | | |- $kernelicon ${default} $kernel"
echo -e "${purple}  | | | | |  $shellicon ${default}  $shell"
echo -e "${purple}  | | | | |  $macicon ${default}    $macmodel"
echo -e "${purple}  | | | | |  $cpuicon ${default}    $cpumac"
echo -e "${purple}  | | | | |  "
echo -e "${purple}  \-------/  ${red}NOTE: You should not use distros. https://dortania.github.io/OpenCore-Install-Guide/" && exit 0
fi

# Void based distributions
if [[ $art =~ "Void" ]]; then
echo -e "${yellow}                         $user@$host"
echo -e "${green}                         $osicon ${default}       $os $spde"
echo -e "${green} __     _____ ___ ____   $kernelicon ${default}   $kernel"
echo -e "${green} \ \   / / _ \_ _|  _ \  $shellicon ${default}    $shell"
echo -e "${green}  \ \ / / | | | || | | | $pkgicon ${default} $pkg "
echo -e "${green}   \ V /| |_| | || |_| | $cpuicon ${default}      $cpu"
echo -e "${green}    \_/  \___/___|____/  $ramicon ${default}      $totalram"
echo -e "${green}                         $usedramicon ${default}     $usedram"
echo -e "${green}                         $initicon ${default}     $init " && exit 0
fi

# Debian based distributions
if [[ $art =~ "Debian" ]]; then
echo -e "${red}      wbbqqqw    ${yellow}$user@$host"
echo -e "${red}    wgw       gq $osicon ${default}       $os $spde"
echo -e "${red}   g     w    g  $kernelicon ${default}   $kernel"
echo -e "${red}   ww    w    wa $shellicon ${default}    $shell"
echo -e "${red}    b     wwwww  $pkgicon ${default} $pkg "
echo -e "${red}    aa           $cpuicon ${default}      $cpu"
echo -e "${red}     wae         $ramicon ${default}      $totalram"
echo -e "${red}        wa       $usedramicon ${default}     $usedram"
echo -e "${red}          aa     $initicon ${default}     $init " && exit 0
fi

# Red Hat based distributions
if [[ $art =~ "Fedora" ]]; then
echo -e "${blue}    awffa  ${yellow}$user@$host"
echo -e "${blue}   wfw     $osicon ${default}       $os $spde"
echo -e "${blue}   ffw     $kernelicon ${default}   $kernel"
echo -e "${blue}   ffw     $shellicon ${default}    $shell"
echo -e "${blue} abwfwba   $pkgicon ${default} $pkg "
echo -e "${blue}   wfa     $cpuicon ${default}      $cpu"
echo -e "${blue}   wfa     $ramicon ${default}      $totalram"
echo -e "${blue}   wfa     $usedramicon ${default}     $usedram"
echo -e "${blue}    w      $initicon ${default}     $init " && exit 0
fi

# macOS distributions
if [[ $art =~ "Project 081" ]]; then
echo -e "${lblue} Y88b   d88P  "
echo -e "${lblue}  Y88b d88P   ${yellow}$user@$host"
echo -e "${lblue}   Y88o88P    $osicon ${default}     $os $spde"
echo -e "${lblue}    Y888P     $kernelicon ${default} $kernel"
echo -e "${lblue}    d888b     $shellicon ${default}  $shell"
echo -e "${lblue}   d88888b    $macicon ${default}    $macmodel"
echo -e "${lblue}  d88P Y88b   $cpuicon ${default}    $cpumac"
echo -e "${lblue} d88P   Y88b  "
echo -e "${lblue}              " && exit 0
fi

if [[ $art =~ "Mac OS X" ]]; then
echo -e "${black} Y88b   d88P  "
echo -e "${black}  Y88b d88P   ${yellow}$user@$host"
echo -e "${black}   Y88o88P    $osicon ${default}     $os $spde"
echo -e "${black}    Y888P     $kernelicon ${default} $kernel"
echo -e "${black}    d888b     $shellicon ${default}  $shell"
echo -e "${black}   d88888b    $macicon ${default}    $macmodel"
echo -e "${black}  d88P Y88b   $cpuicon ${default}    $cpumac"
echo -e "${black} d88P   Y88b  "
echo -e "${black}              " && exit 0
fi

if [[ $art =~ "macOS" ]]; then
echo -e "${default}  _ __ ___   __ _  ___  "
echo -e "${default} | '_ ' _ \ / _' |/ __| ${yellow}$user@$host"
echo -e "${default} | | | | | | (_| | (__  $osicon ${default}     $os $spde"
echo -e "${default} |_| |_|_|_|\__,_|\___| $kernelicon ${default} $kernel"
echo -e "${default}      / _ \/ ___|       $shellicon ${default}  $shell"
echo -e "${default}     | | | \___ \       $macicon ${default}    $macmodel"
echo -e "${default}     | |_| |___) |      $cpuicon ${default}    $cpumac"
echo -e "${default}      \___/|____/       "
echo -e "${default}" && exit 0
fi

# Generic art if yours is none of the above
echo -e "${orange}             $user@$host"
echo -e "${orange}     .--.    $osicon ${default}       $os $spde"
echo -e "${orange}    |o_o |   $kernelicon ${default}   $kernel"
echo -e "${orange}    |:_/ |   $shellicon ${default}    $shell"
echo -e "${orange}   //   \ \  $pkgicon ${default} $pkg"
echo -e "${orange}  (|     | ) $cpuicon ${default}      $cpu"
echo -e "${orange} /'|_   _/'\ $ramicon ${default}      $totalram"
echo -e "${orange} \___)=(___/ $usedramicon ${default}     $usedram"
echo -e "${orange}             $initicon ${default}     $init"

exit 0
